Explain, generally, what is meant by a NoSQL database

NoSQL or "non SQL"  database provides a mechanism for storage and retrieval of data which is modeled in means other than
the tabular relations used in relational databases. NoSQL databases are used in many big data and real-time
web applications.

there exist many types of databases in modern programming, graf DB, relationel, document and ect.

read more at wiki
________________________________________________________________________________________________________________________

Explain Pros & Cons in using a NoSQL database like MongoDB as your data store, compared to a traditional relational
SQL Database like MySQL.
General overview:

In a traditional relational approach, an article object might be related to a category (an object), a tag
(another object), a comment (another object), and so on. Relationships between different types of data were specified
in the database schema, these relational databases could be queried with a standard Structured Query Language (SQL).

Cloud computing: Data has to be spread across multiple servers easily without disruption. In a complex SQL database,
this is difficult because many queries require multiple large tables to be joined together to provide a response.
Executing distributed joins is a very complex problem in relational databases.

Social media: SQL databases are extremely efficient at storing structured information, and workarounds or compromises
are necessary for storing and querying unstructured data.

Agile development methods mean that the database schema needs to change rapidly as demands evolve. SQL databases
require their structure to be specified in advance, which means any changes to the information schema require
time-consuming ALTER statements to be run on a table.
Pros and Cons

Pro: Simple design, no foreign key ect.
     some time faster and easy horizontal scaling to clusters of machines.

cons:   Compromise consistency in favor of availability (CAP theorem).
        Huge previous investments in existing relational databases.(time and money)
        Mostly lack ACID, rollback ect.

Sources wiki and mean slides
________________________________________________________________________________________________________________________

Explain how databases like MongoDB and redis would be classified in the NoSQL world

MongoDB Is a document oriented database, which makes it performance better and makes it easier to distribute data across
multiple servers, horizontaly.
Application logic is easier to write. No need to translate between objects in your application and SQL queries,
you can just turn the object model directly into a document.
Unstructured data can be stored easily, since a document contains whatever keys and values the application logic requires.

Redis is an open source, in-memory data structure store, used as database, cache and message broker. It supports data
structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial
indexes with radius queries. Basically key/value storage.
Redis typically holds the whole dataset in memory, and saves to disk every two seconds.

Redis is a Session Store that can help with scaling of the database.

sources wiki and slides, and documentaion
________________________________________________________________________________________________________________________
Explain reasons to add a layer like Mongoose, on top on of a schema-less database like MongoDB

Mongoose is an ORM-like tool for MongoDB. Mongoose provides a straight-forward, schema-based solution to model your
application data. It includes built-in type casting, validation, query building, business logic hooks and more, out of
the box.
Mongoose adds another layer of robustness on top of MongoDB. Write less code, easier to read code (object modeling) and
schema validation.
MongoDB is schema-less and Mongoose adds schemas. This might seem counterintuitive at first... but Real life data
has (often) structure and (often) types (so this basicly move it to SQL like conditions.)

sources lars slides
________________________________________________________________________________________________________________________

Explain, using relevant examples, the strategy for querying MongoDB (all CRUD operations)
Ex. DB: Find document with id.


//insert example here this is not mine needs to be replaced
Look in the collection "jokes" and find the document with specific id. Return the document called "data".

var connection = require('../db/db');
var ObjectId = require('mongodb').ObjectID;

var getJoke = function (id, callback) {
    var db = getConnection();

    db.collection('jokes').findOne({'_id': new ObjectId(id)}, function (err, data) {
        if (err) {
            callback(err);
        }
        callback(null, data);
    });
};

Ex. REST: find all jokes

Define endpoint "/jokes". Call function "allJokes" and output the returned data as json in the response.

var router = express.Router();
var jokes = require('../model/joke');

router.get('/jokes', function (req, res, next) {
    jokes.allJokes(function (err, data) {
        if (err) {
            res.json(getJsonError(err));
        }
        res.json(data);
    });
});


Demonstrate, using a REST-API, how to perform all CRUD operations on a MongoDB
// need to be done later

Refer to previous question: "Explain, using relevant examples, the strategy for querying MongoDB (all CRUD operations)".
Explain the benefits from using Mongoose, and provide an example involving all CRUD operations

Refer to previous question: "Explain reasons to add a layer like Mongoose, on top on of a schema-less database like
MongoDB".

Explain how redis "fits" into the NoSQL world, and provide an example of how to use it.

One of the most apparent use cases for Redis is using it as a Session Store. The advantages of using Redis over
other session stores, is that Redis offers persistence.
While maintaining a cache isn't typically mission critical with regards to consistency, most users like consistensy
while browsning and storring elements on webpages.

Small example showing how to persist a cookie(session) to a remote Redis database
// need to be put in the project

sources slides
________________________________________________________________________________________________________________________

Explain, using a relevant example, how redis (or a similar) can increase scalability (drastic) for a server using server
side sessions

When your customer or user logs in, they authenticate and receive a token. This token then allows them to interact with
any server in your web tier - the token is sent each time. There is no need for a "master" server and "slave" servers,
because each server is the same. This help with scaling horizontally.
The session data is then stored in a cache database like Redis.

________________________________________________________________________________________________________________________

Explain, using a relevant example, a full MEAN application including relevant test cases to test the REST-API

// need to be put up as well